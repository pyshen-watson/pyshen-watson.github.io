<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Lua.1 Lua 簡介與安裝</title>
    <link href="/2022/02/15/lua/lua1/"/>
    <url>/2022/02/15/lua/lua1/</url>
    
    <content type="html"><![CDATA[<h1 id="Lua是什麼"><a href="#Lua是什麼" class="headerlink" title="Lua是什麼?"></a>Lua是什麼?</h1><p>Lua是一個<strong>開源</strong>的<strong>腳本語言</strong>，它的官方版本只包括一個精簡的核心和最基本的庫。這使得Lua<strong>體積小</strong>、<strong>啟動速度快</strong>，被譽為最快的腳本語言。</p><h1 id="如何在Linux上安裝Lua-以Ubuntu為例"><a href="#如何在Linux上安裝Lua-以Ubuntu為例" class="headerlink" title="如何在Linux上安裝Lua (以Ubuntu為例)"></a>如何在Linux上安裝Lua (以Ubuntu為例)</h1><p>首先使用apt安裝Lua及必要工具：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install lua5.3<br>sudo apt install build-essential libreadline-dev<br></code></pre></td></tr></table></figure><p>安裝完成後，我們要編譯最新版本，移動到安裝Lua的目錄後，使用以下指令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">mkdir lua_build<br><span class="hljs-built_in">cd</span> lua_build<br>curl -R -O http://www.lua.org/ftp/lua-5.3.5.tar.gz<br>tar -zxf lua-5.3.5.tar.gz<br><span class="hljs-built_in">cd</span> lua-5.3.5<br>make linux <span class="hljs-built_in">test</span><br>sudo make install<br></code></pre></td></tr></table></figure></p><p>之後輸入在Command Line輸入lua應該就能進入以下畫面了：<br><img src="https://i.ibb.co/x2K3VqK/2022-02-15-153656.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Lua</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Wireless.1 無線網路與餘弦波</title>
    <link href="/2021/12/16/wireless-network/wn1/"/>
    <url>/2021/12/16/wireless-network/wn1/</url>
    
    <content type="html"><![CDATA[<h1 id="Cosine-wave-餘弦波"><a href="#Cosine-wave-餘弦波" class="headerlink" title="Cosine wave (餘弦波)"></a>Cosine wave (餘弦波)</h1><p>無限訊號中常使用的<strong>諧波信號(Harmonic signal)</strong>，通常可表示成cosine wave的疊加，最基本的就是：</p><script type="math/tex; mode=display">y=cos(\omega t)</script><ul><li>$\omega$：Angular frequency (角速度) (常用單位：$rad/s$)</li><li>$t$：Time (時間) (常用單位：$s$)</li></ul><p><img src="https://i.ibb.co/9YNRKQV/image.png" alt="可以想像有一個**單位向量**在複平面上旋轉，其與正實數軸的夾角為 $\theta$，$cos(\omega t)$就是此單位向量在實數軸上的投影長度。"></p><ul><li>$f$：Frequency (頻率) (常用單位：$Hz$)</li></ul><p>頻率就是每單位時間轉了幾圈(幾個$2 \pi$)，所以顯然 $\omega = 2 \pi f$</p><h1 id="Initial-phase-初始相位"><a href="#Initial-phase-初始相位" class="headerlink" title="Initial phase (初始相位)"></a>Initial phase (初始相位)</h1><ul><li>$\phi$：Initial phase (初始相位) (常用單位：$rad$)</li></ul><script type="math/tex; mode=display">y=cos(\omega t+ \phi)=cos(2 \pi ft+\phi)</script><p>$+ \phi$ 可以想成：</p><ol><li>複平面上<strong>單位向量</strong>一開始就和<strong>正實數軸</strong>夾角為 $\phi$</li><li>將餘弦波圖形向<strong>左</strong>平移$\frac{\phi}{2 \pi}$個單位時間</li></ol><h1 id="Euler’s-formula-歐拉公式"><a href="#Euler’s-formula-歐拉公式" class="headerlink" title="Euler’s formula (歐拉公式)"></a>Euler’s formula (歐拉公式)</h1><p><img src="https://i.ibb.co/DVQQRQz/image.png" width="20%"><br>一般來說，我們會以$i$來表示虛數單位$\sqrt{-1}$，但由於$i$在程式語言中經常作為迴圈的index，因此有時候則會使用$j$來做為虛數單位</p><ul><li>$z^*$：Conjugation(共軛複數)</li></ul><blockquote><p>  $z=a+bi$<br>   $z^*=a-bi$</p></blockquote><p>我們可以利用歐拉公式$e^{i\theta}=cos\theta+i\ sin\theta$，將$z=a+bi$ 寫成 $z=d\ e^{i \theta}$ </p><blockquote><p>$\theta=tan^{-1}(\frac{b}{a})$ (和正實數軸的夾角)<br>$d=\sqrt{a^2+b^2}$ (到原點的距離)</p></blockquote><p>這樣的寫法可以讓複數間的乘法更容易且保持實部與虛部的各自意義</p><h1 id="Propagation-傳播"><a href="#Propagation-傳播" class="headerlink" title="Propagation(傳播)"></a>Propagation(傳播)</h1><h2 id="1-Channel-Loss"><a href="#1-Channel-Loss" class="headerlink" title="1. Channel Loss"></a>1. Channel Loss</h2><p>當sender與receiver距離$d$ ，sender發出強度為$a$ 的餘弦波，且處於<strong>Free Space</strong> (兩者間無阻隔)：</p><ul><li>Sender：$a\ cos(\omega t + \phi)$</li><li>Receiver：$\frac{a}{L} cos(\omega t+ \phi)$</li></ul><p>$L$ 將會與$d$ 成正比</p><h2 id="2-Propagation-Delay"><a href="#2-Propagation-Delay" class="headerlink" title="2. Propagation Delay"></a>2. Propagation Delay</h2><p>由於電波的傳播需要時間，因此兩者間會有時間差$\Delta t$ ，若：</p><ul><li>Sender：$S(t)=cos(\omega t +\phi)$</li><li>Receiver：$R(t) = S(t-\Delta t)=cos(\omega(t-\Delta t)+\phi)=cos(\omega t + (\phi - \phi ‘))$<ul><li>$\phi’=\omega \Delta t=\omega \frac{d}{c}=2\pi f \frac{d}{c}$</li><li>當$f$足夠大時，這個相位差才會變得明顯</li></ul></li></ul><h2 id="3-Broadcasting"><a href="#3-Broadcasting" class="headerlink" title="3. Broadcasting"></a>3. Broadcasting</h2><p>無線網路是用<strong>廣播(Broadcasting)</strong>來傳播，但如果有多個傳輸端的話，如$S_1(t)$及$S_2(t)$同時發送，那Receiver收到的$R(t)=S_1(t)+S_2(t)$ 將無法分開兩個信號</p>]]></content>
    
    
    <categories>
      
      <category>Wireless Network</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker.1 一些關於Docker的事</title>
    <link href="/2021/12/15/docker/docker1/"/>
    <url>/2021/12/15/docker/docker1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>說到為什麼想學Docker，其實老早以前就想學了，只是大部分都只是亂翻翻零散的文章或看一些沒頭沒尾的影片。直到2021的黑色星期五，看到Udemy上的折扣真的太香了，所以買了<a href="https://www.udemy.com/course/docker-mastery/">Docker Mastery</a>的課程。(這次會好好學的)</p><p>至於為什麼要寫成文章呢?一方面是blog上還不知道要寫些什麼，另一方面是我平常習慣使用WSL但他對docker的支援好像滿多問題的。 為了之後換電腦或換工作場所時還能記得怎麼弄這些瑣碎的bug，而不是一直stackoverflow，所以平常就記錄一些debug的過程和筆記吧!</p><h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><p>前情提要: 這邊只會提到各種Linux與WSL的安裝方式，其他的我也沒用過。</p><p>雖然Docker官方提供了一大堆的說明文件關於不同的Linux該如何安裝到最新版本的Docker，但其實有一個超方便的工具叫做<a href="https://get.docker.com/">get.docker.com</a>! 我們要做的就只有輸入以下兩行指令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -fsSL https://get.docker.com -o get-docker.sh<br>sh get-docker.sh<br></code></pre></td></tr></table></figure><h2 id="更改-Docker-Group權限"><a href="#更改-Docker-Group權限" class="headerlink" title="更改 Docker Group權限"></a>更改 Docker Group權限</h2><p>雖然是可以用了但目前還只能在root模式下使用，我們可以輸入:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo usermod -aG docker &lt;your_username&gt;<br></code></pre></td></tr></table></figure><p>來將我們的帳號加入docker group，這樣以後就不用再打<code>sudo</code>啦~<br>這時候我們可以使用:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker version<br></code></pre></td></tr></table></figure><br>來確認docker是否可以使用了， 如果不行的話，可以嘗試log out再log in看看。</p><h2 id="Docker-daemon-running"><a href="#Docker-daemon-running" class="headerlink" title="Docker daemon running?"></a>Docker daemon running?</h2><p>當我們使用<code>docker version</code>時，可能會看到這個畫面:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">Client:<br> Version:           20.10.11<br> API version:       1.41<br> Go version:        go1.16.10<br> Git commit:        dea9396<br> Built:             Thu Nov 18 00:34:03 2021<br> OS/Arch:           linux/amd64<br> Context:           default<br> Experimental:      <span class="hljs-literal">true</span><br>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?<br></code></pre></td></tr></table></figure><p>為什麼我們只能看到Client的version呢? 原來WSL並不支援Docker Daemon，解決的方式是到Docker Hub下載<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows">Docker Desktop</a>。</p><p><a href="https://medium.com/%E4%B8%80%E5%80%8B%E5%B0%8F%E5%B0%8F%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98/wsl-%E8%88%87-windows-%E7%9A%84%E5%AE%8C%E7%BE%8E%E9%9B%99%E7%B5%90%E5%90%88-%E5%9C%A8wsl-%E4%B8%AD%E5%AE%89%E8%A3%9D-docker-e722e87ffa3b">原文</a>提到，下載後需要到Setting &gt; General 勾選 <code>Expose daemon on tcp://localhost:2375 without TLS</code>然後在<code>~/.profile</code> 中加入 <code>export DOCKER_HOST=127.0.0.1:2375</code> 並執行<code>source ~/.profile</code> 但我在還沒做這個步驟時，<strong>Docker daemon就已經run起來了</strong>，反而做完這步之後又找不到daemon了@@ 所以大家可以視情況決定要不要加這一步。</p><h2 id="安裝-Docker-Machine"><a href="#安裝-Docker-Machine" class="headerlink" title="安裝 Docker Machine"></a>安裝 Docker Machine</h2><p>Docker Machine是安裝在各種虛擬化平台，用來管理VM中給Docker Engine運行的Docker Host。<br>Docker的結構大概長得像這樣:<br><img src="https://i.ibb.co/FbV3pJh/image.png" alt=""><br>不過在後來Docker推出了Docker Desktop之後，就把原本的安裝教學廢棄了，所以我們去Docker Hub下載<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows">Docker Desktop</a>就好。</p><h2 id="安裝-Docker-Compose"><a href="#安裝-Docker-Compose" class="headerlink" title="安裝 Docker Compose"></a>安裝 Docker Compose</h2><p>Docker Compose是用來協助定義和共用多容器應用程式而開發的工具，可以用:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/2.2.1/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="hljs-built_in">local</span>/bin/docker-compose<br>sudo chmod +x /usr/<span class="hljs-built_in">local</span>/bin/docker-compose<br></code></pre></td></tr></table></figure><br>來完成安裝，也可以到<a href="https://github.com/docker/compose">GitHub</a>查看最新的release版本。</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>嗨 Hexo!</title>
    <link href="/2021/12/14/First-Article/"/>
    <url>/2021/12/14/First-Article/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>隔了半年又重新開始使用Hexo了，這是第一篇文章。<br>現在還不知道要寫些什麼， 就先留在這裡吧。<br>之後想到再補充~</p><h1 id="圖源"><a href="#圖源" class="headerlink" title="圖源"></a>圖源</h1><p>我的圖源基本上都是來自自己拍攝，以及<a href="https://www.pexels.com/zh-tw/" title="pexels">pexels</a>，一個很優質的網站:)</p>]]></content>
    
    
    <categories>
      
      <category>Chat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
